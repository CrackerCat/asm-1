package asm_test

import (
	"testing"

	"github.com/akyoto/asm"
	"github.com/akyoto/assert"
)

func TestLoadRegister(t *testing.T) {
	usagePatterns := []struct {
		Destination string
		Source      string
		Offset      byte
		ByteCount   byte
		Code        []byte
	}{
		{"rax", "rax", 1, 8, []byte{0x48, 0x8b, 0x40, 0x01}},
		{"eax", "rax", 1, 4, []byte{0x8b, 0x40, 0x01}},
		{"ax", "rax", 1, 2, []byte{0x66, 0x8b, 0x40, 0x01}},
		{"al", "rax", 1, 1, []byte{0x8a, 0x40, 0x01}},
		{"rcx", "rcx", 1, 8, []byte{0x48, 0x8b, 0x49, 0x01}},
		{"ecx", "rcx", 1, 4, []byte{0x8b, 0x49, 0x01}},
		{"cx", "rcx", 1, 2, []byte{0x66, 0x8b, 0x49, 0x01}},
		{"cl", "rcx", 1, 1, []byte{0x8a, 0x49, 0x01}},
		{"rdx", "rdx", 1, 8, []byte{0x48, 0x8b, 0x52, 0x01}},
		{"edx", "rdx", 1, 4, []byte{0x8b, 0x52, 0x01}},
		{"dx", "rdx", 1, 2, []byte{0x66, 0x8b, 0x52, 0x01}},
		{"dl", "rdx", 1, 1, []byte{0x8a, 0x52, 0x01}},
		{"rbx", "rbx", 1, 8, []byte{0x48, 0x8b, 0x5b, 0x01}},
		{"ebx", "rbx", 1, 4, []byte{0x8b, 0x5b, 0x01}},
		{"bx", "rbx", 1, 2, []byte{0x66, 0x8b, 0x5b, 0x01}},
		{"bl", "rbx", 1, 1, []byte{0x8a, 0x5b, 0x01}},
		{"rdi", "rdi", 1, 8, []byte{0x48, 0x8b, 0x7f, 0x01}},
		{"edi", "rdi", 1, 4, []byte{0x8b, 0x7f, 0x01}},
		{"di", "rdi", 1, 2, []byte{0x66, 0x8b, 0x7f, 0x01}},
		{"dl", "rdi", 1, 1, []byte{0x8a, 0x57, 0x01}},
		{"rsi", "rsi", 1, 8, []byte{0x48, 0x8b, 0x76, 0x01}},
		{"esi", "rsi", 1, 4, []byte{0x8b, 0x76, 0x01}},
		{"si", "rsi", 1, 2, []byte{0x66, 0x8b, 0x76, 0x01}},
		{"sil", "rsi", 1, 1, []byte{0x40, 0x8a, 0x76, 0x01}},
		{"rbp", "rbp", 1, 8, []byte{0x48, 0x8b, 0x6d, 0x01}},
		{"ebp", "rbp", 1, 4, []byte{0x8b, 0x6d, 0x01}},
		{"bp", "rbp", 1, 2, []byte{0x66, 0x8b, 0x6d, 0x01}},
		{"bl", "rbp", 1, 1, []byte{0x8a, 0x5d, 0x01}},
		{"rsp", "rsp", 1, 8, []byte{0x48, 0x8b, 0x64, 0x24, 0x01}},
		{"esp", "rsp", 1, 4, []byte{0x8b, 0x64, 0x24, 0x01}},
		{"sp", "rsp", 1, 2, []byte{0x66, 0x8b, 0x64, 0x24, 0x01}},
		{"spl", "rsp", 1, 1, []byte{0x40, 0x8a, 0x64, 0x24, 0x01}},
		{"r8", "r8", 1, 8, []byte{0x4d, 0x8b, 0x40, 0x01}},
		{"r8d", "r8", 1, 4, []byte{0x45, 0x8b, 0x40, 0x01}},
		{"r8w", "r8", 1, 2, []byte{0x66, 0x45, 0x8b, 0x40, 0x01}},
		{"r8b", "r8", 1, 1, []byte{0x45, 0x8a, 0x40, 0x01}},
		{"r9", "r9", 1, 8, []byte{0x4d, 0x8b, 0x49, 0x01}},
		{"r9d", "r9", 1, 4, []byte{0x45, 0x8b, 0x49, 0x01}},
		{"r9w", "r9", 1, 2, []byte{0x66, 0x45, 0x8b, 0x49, 0x01}},
		{"r9b", "r9", 1, 1, []byte{0x45, 0x8a, 0x49, 0x01}},
		{"r10", "r10", 1, 8, []byte{0x4d, 0x8b, 0x52, 0x01}},
		{"r10d", "r10", 1, 4, []byte{0x45, 0x8b, 0x52, 0x01}},
		{"r10w", "r10", 1, 2, []byte{0x66, 0x45, 0x8b, 0x52, 0x01}},
		{"r10b", "r10", 1, 1, []byte{0x45, 0x8a, 0x52, 0x01}},
		{"r11", "r11", 1, 8, []byte{0x4d, 0x8b, 0x5b, 0x01}},
		{"r11d", "r11", 1, 4, []byte{0x45, 0x8b, 0x5b, 0x01}},
		{"r11w", "r11", 1, 2, []byte{0x66, 0x45, 0x8b, 0x5b, 0x01}},
		{"r11b", "r11", 1, 1, []byte{0x45, 0x8a, 0x5b, 0x01}},
		{"r12", "r12", 1, 8, []byte{0x4d, 0x8b, 0x64, 0x24, 0x01}},
		{"r12d", "r12", 1, 4, []byte{0x45, 0x8b, 0x64, 0x24, 0x01}},
		{"r12w", "r12", 1, 2, []byte{0x66, 0x45, 0x8b, 0x64, 0x24, 0x01}},
		{"r12b", "r12", 1, 1, []byte{0x45, 0x8a, 0x64, 0x24, 0x01}},
		{"r13", "r13", 1, 8, []byte{0x4d, 0x8b, 0x6d, 0x01}},
		{"r13d", "r13", 1, 4, []byte{0x45, 0x8b, 0x6d, 0x01}},
		{"r13w", "r13", 1, 2, []byte{0x66, 0x45, 0x8b, 0x6d, 0x01}},
		{"r13b", "r13", 1, 1, []byte{0x45, 0x8a, 0x6d, 0x01}},
		{"r14", "r14", 1, 8, []byte{0x4d, 0x8b, 0x76, 0x01}},
		{"r14d", "r14", 1, 4, []byte{0x45, 0x8b, 0x76, 0x01}},
		{"r14w", "r14", 1, 2, []byte{0x66, 0x45, 0x8b, 0x76, 0x01}},
		{"r14b", "r14", 1, 1, []byte{0x45, 0x8a, 0x76, 0x01}},
		{"r15", "r15", 1, 8, []byte{0x4d, 0x8b, 0x7f, 0x01}},
		{"r15d", "r15", 1, 4, []byte{0x45, 0x8b, 0x7f, 0x01}},
		{"r15w", "r15", 1, 2, []byte{0x66, 0x45, 0x8b, 0x7f, 0x01}},
		{"r15b", "r15", 1, 1, []byte{0x45, 0x8a, 0x7f, 0x01}},
	}

	for _, pattern := range usagePatterns {
		a := asm.New()
		t.Logf("load %dB %s, [%s+%d]", pattern.ByteCount, pattern.Destination, pattern.Source, pattern.Offset)
		a.LoadRegister(pattern.Destination, pattern.Source, pattern.Offset, pattern.ByteCount)
		assert.DeepEqual(t, a.Bytes(), pattern.Code)
	}
}
