package asm_test

import (
	"testing"

	"github.com/akyoto/asm"
	"github.com/akyoto/assert"
)

func TestStoreNumber(t *testing.T) {
	usagePatterns := []struct {
		Register  string
		Offset    byte
		ByteCount byte
		Number    int64
		Code      []byte
	}{
		// No offset
		{"rax", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"rax", 0, 4, 0x7f, []byte{0xc7, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"rax", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x00, 0x7f, 0x00}},
		{"rax", 0, 1, 0x7f, []byte{0xc6, 0x00, 0x7f}},
		{"rcx", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rcx", 0, 4, 0x7f, []byte{0xc7, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rcx", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x01, 0x7f, 0x00}},
		{"rcx", 0, 1, 0x7f, []byte{0xc6, 0x01, 0x7f}},
		{"rdx", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x02, 0x7f, 0x00, 0x00, 0x00}},
		{"rdx", 0, 4, 0x7f, []byte{0xc7, 0x02, 0x7f, 0x00, 0x00, 0x00}},
		{"rdx", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x02, 0x7f, 0x00}},
		{"rdx", 0, 1, 0x7f, []byte{0xc6, 0x02, 0x7f}},
		{"rbx", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x03, 0x7f, 0x00, 0x00, 0x00}},
		{"rbx", 0, 4, 0x7f, []byte{0xc7, 0x03, 0x7f, 0x00, 0x00, 0x00}},
		{"rbx", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x03, 0x7f, 0x00}},
		{"rbx", 0, 1, 0x7f, []byte{0xc6, 0x03, 0x7f}},
		{"rdi", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x07, 0x7f, 0x00, 0x00, 0x00}},
		{"rdi", 0, 4, 0x7f, []byte{0xc7, 0x07, 0x7f, 0x00, 0x00, 0x00}},
		{"rdi", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x07, 0x7f, 0x00}},
		{"rdi", 0, 1, 0x7f, []byte{0xc6, 0x07, 0x7f}},
		{"rsi", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x06, 0x7f, 0x00, 0x00, 0x00}},
		{"rsi", 0, 4, 0x7f, []byte{0xc7, 0x06, 0x7f, 0x00, 0x00, 0x00}},
		{"rsi", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x06, 0x7f, 0x00}},
		{"rsi", 0, 1, 0x7f, []byte{0xc6, 0x06, 0x7f}},
		{"rbp", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x45, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"rbp", 0, 4, 0x7f, []byte{0xc7, 0x45, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"rbp", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x45, 0x00, 0x7f, 0x00}},
		{"rbp", 0, 1, 0x7f, []byte{0xc6, 0x45, 0x00, 0x7f}},
		{"rsp", 0, 8, 0x7f, []byte{0x48, 0xc7, 0x04, 0x24, 0x7f, 0x00, 0x00, 0x00}},
		{"rsp", 0, 4, 0x7f, []byte{0xc7, 0x04, 0x24, 0x7f, 0x00, 0x00, 0x00}},
		{"rsp", 0, 2, 0x7f, []byte{0x66, 0xc7, 0x04, 0x24, 0x7f, 0x00}},
		{"rsp", 0, 1, 0x7f, []byte{0xc6, 0x04, 0x24, 0x7f}},
		{"r8", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"r8", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"r8", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x00, 0x7f, 0x00}},
		{"r8", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x00, 0x7f}},
		{"r9", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r9", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r9", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x01, 0x7f, 0x00}},
		{"r9", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x01, 0x7f}},
		{"r10", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x02, 0x7f, 0x00, 0x00, 0x00}},
		{"r10", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x02, 0x7f, 0x00, 0x00, 0x00}},
		{"r10", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x02, 0x7f, 0x00}},
		{"r10", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x02, 0x7f}},
		{"r11", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x03, 0x7f, 0x00, 0x00, 0x00}},
		{"r11", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x03, 0x7f, 0x00, 0x00, 0x00}},
		{"r11", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x03, 0x7f, 0x00}},
		{"r11", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x03, 0x7f}},
		{"r12", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x04, 0x24, 0x7f, 0x00, 0x00, 0x00}},
		{"r12", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x04, 0x24, 0x7f, 0x00, 0x00, 0x00}},
		{"r12", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x04, 0x24, 0x7f, 0x00}},
		{"r12", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x04, 0x24, 0x7f}},
		{"r13", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x45, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"r13", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x45, 0x00, 0x7f, 0x00, 0x00, 0x00}},
		{"r13", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x45, 0x00, 0x7f, 0x00}},
		{"r13", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x45, 0x00, 0x7f}},
		{"r14", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x06, 0x7f, 0x00, 0x00, 0x00}},
		{"r14", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x06, 0x7f, 0x00, 0x00, 0x00}},
		{"r14", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x06, 0x7f, 0x00}},
		{"r14", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x06, 0x7f}},
		{"r15", 0, 8, 0x7f, []byte{0x49, 0xc7, 0x07, 0x7f, 0x00, 0x00, 0x00}},
		{"r15", 0, 4, 0x7f, []byte{0x41, 0xc7, 0x07, 0x7f, 0x00, 0x00, 0x00}},
		{"r15", 0, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x07, 0x7f, 0x00}},
		{"r15", 0, 1, 0x7f, []byte{0x41, 0xc6, 0x07, 0x7f}},

		// Offset of 1
		{"rax", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x40, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rax", 1, 4, 0x7f, []byte{0xc7, 0x40, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rax", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x40, 0x01, 0x7f, 0x00}},
		{"rax", 1, 1, 0x7f, []byte{0xc6, 0x40, 0x01, 0x7f}},
		{"rcx", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x41, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rcx", 1, 4, 0x7f, []byte{0xc7, 0x41, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rcx", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x41, 0x01, 0x7f, 0x00}},
		{"rcx", 1, 1, 0x7f, []byte{0xc6, 0x41, 0x01, 0x7f}},
		{"rdx", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x42, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rdx", 1, 4, 0x7f, []byte{0xc7, 0x42, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rdx", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x42, 0x01, 0x7f, 0x00}},
		{"rdx", 1, 1, 0x7f, []byte{0xc6, 0x42, 0x01, 0x7f}},
		{"rbx", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x43, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rbx", 1, 4, 0x7f, []byte{0xc7, 0x43, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rbx", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x43, 0x01, 0x7f, 0x00}},
		{"rbx", 1, 1, 0x7f, []byte{0xc6, 0x43, 0x01, 0x7f}},
		{"rdi", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x47, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rdi", 1, 4, 0x7f, []byte{0xc7, 0x47, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rdi", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x47, 0x01, 0x7f, 0x00}},
		{"rdi", 1, 1, 0x7f, []byte{0xc6, 0x47, 0x01, 0x7f}},
		{"rsi", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x46, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rsi", 1, 4, 0x7f, []byte{0xc7, 0x46, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rsi", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x46, 0x01, 0x7f, 0x00}},
		{"rsi", 1, 1, 0x7f, []byte{0xc6, 0x46, 0x01, 0x7f}},
		{"rbp", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x45, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rbp", 1, 4, 0x7f, []byte{0xc7, 0x45, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rbp", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x45, 0x01, 0x7f, 0x00}},
		{"rbp", 1, 1, 0x7f, []byte{0xc6, 0x45, 0x01, 0x7f}},
		{"rsp", 1, 8, 0x7f, []byte{0x48, 0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rsp", 1, 4, 0x7f, []byte{0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"rsp", 1, 2, 0x7f, []byte{0x66, 0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00}},
		{"rsp", 1, 1, 0x7f, []byte{0xc6, 0x44, 0x24, 0x01, 0x7f}},
		{"r8", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x40, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r8", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x40, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r8", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x40, 0x01, 0x7f, 0x00}},
		{"r8", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x40, 0x01, 0x7f}},
		{"r9", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x41, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r9", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x41, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r9", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x41, 0x01, 0x7f, 0x00}},
		{"r9", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x41, 0x01, 0x7f}},
		{"r10", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x42, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r10", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x42, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r10", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x42, 0x01, 0x7f, 0x00}},
		{"r10", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x42, 0x01, 0x7f}},
		{"r11", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x43, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r11", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x43, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r11", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x43, 0x01, 0x7f, 0x00}},
		{"r11", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x43, 0x01, 0x7f}},
		{"r12", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r12", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r12", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x44, 0x24, 0x01, 0x7f, 0x00}},
		{"r12", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x44, 0x24, 0x01, 0x7f}},
		{"r13", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x45, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r13", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x45, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r13", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x45, 0x01, 0x7f, 0x00}},
		{"r13", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x45, 0x01, 0x7f}},
		{"r14", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x46, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r14", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x46, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r14", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x46, 0x01, 0x7f, 0x00}},
		{"r14", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x46, 0x01, 0x7f}},
		{"r15", 1, 8, 0x7f, []byte{0x49, 0xc7, 0x47, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r15", 1, 4, 0x7f, []byte{0x41, 0xc7, 0x47, 0x01, 0x7f, 0x00, 0x00, 0x00}},
		{"r15", 1, 2, 0x7f, []byte{0x66, 0x41, 0xc7, 0x47, 0x01, 0x7f, 0x00}},
		{"r15", 1, 1, 0x7f, []byte{0x41, 0xc6, 0x47, 0x01, 0x7f}},
	}

	for _, pattern := range usagePatterns {
		a := asm.New()
		t.Logf("store %dB [%s+%d], %d", pattern.ByteCount, pattern.Register, pattern.Offset, pattern.Number)
		a.StoreNumber(pattern.Register, pattern.Offset, pattern.ByteCount, uint64(pattern.Number))
		assert.DeepEqual(t, a.Code(), pattern.Code)
	}
}

func TestStoreRegister(t *testing.T) {
	usagePatterns := []struct {
		RegisterTo   string
		Offset       byte
		ByteCount    byte
		RegisterFrom string
		Code         []byte
	}{
		{"rax", 1, 8, "rax", []byte{0x48, 0x89, 0x40, 0x01}},
		{"rax", 1, 4, "eax", []byte{0x89, 0x40, 0x01}},
		{"rax", 1, 2, "ax", []byte{0x66, 0x89, 0x40, 0x01}},
		{"rax", 1, 1, "al", []byte{0x88, 0x40, 0x01}},
		{"rcx", 1, 8, "rcx", []byte{0x48, 0x89, 0x49, 0x01}},
		{"rcx", 1, 4, "ecx", []byte{0x89, 0x49, 0x01}},
		{"rcx", 1, 2, "cx", []byte{0x66, 0x89, 0x49, 0x01}},
		{"rcx", 1, 1, "cl", []byte{0x88, 0x49, 0x01}},
		{"rdx", 1, 8, "rdx", []byte{0x48, 0x89, 0x52, 0x01}},
		{"rdx", 1, 4, "edx", []byte{0x89, 0x52, 0x01}},
		{"rdx", 1, 2, "dx", []byte{0x66, 0x89, 0x52, 0x01}},
		{"rdx", 1, 1, "dl", []byte{0x88, 0x52, 0x01}},
		{"rbx", 1, 8, "rbx", []byte{0x48, 0x89, 0x5b, 0x01}},
		{"rbx", 1, 4, "ebx", []byte{0x89, 0x5b, 0x01}},
		{"rbx", 1, 2, "bx", []byte{0x66, 0x89, 0x5b, 0x01}},
		{"rbx", 1, 1, "bl", []byte{0x88, 0x5b, 0x01}},
		{"rdi", 1, 8, "rdi", []byte{0x48, 0x89, 0x7f, 0x01}},
		{"rdi", 1, 4, "edi", []byte{0x89, 0x7f, 0x01}},
		{"rdi", 1, 2, "di", []byte{0x66, 0x89, 0x7f, 0x01}},
		{"rdi", 1, 1, "dl", []byte{0x88, 0x57, 0x01}},
		{"rsi", 1, 8, "rsi", []byte{0x48, 0x89, 0x76, 0x01}},
		{"rsi", 1, 4, "esi", []byte{0x89, 0x76, 0x01}},
		{"rsi", 1, 2, "si", []byte{0x66, 0x89, 0x76, 0x01}},
		{"rsi", 1, 1, "sil", []byte{0x40, 0x88, 0x76, 0x01}},
		{"rbp", 1, 8, "rbp", []byte{0x48, 0x89, 0x6d, 0x01}},
		{"rbp", 1, 4, "ebp", []byte{0x89, 0x6d, 0x01}},
		{"rbp", 1, 2, "bp", []byte{0x66, 0x89, 0x6d, 0x01}},
		{"rbp", 1, 1, "bl", []byte{0x88, 0x5d, 0x01}},
		{"rsp", 1, 8, "rsp", []byte{0x48, 0x89, 0x64, 0x24, 0x01}},
		{"rsp", 1, 4, "esp", []byte{0x89, 0x64, 0x24, 0x01}},
		{"rsp", 1, 2, "sp", []byte{0x66, 0x89, 0x64, 0x24, 0x01}},
		{"rsp", 1, 1, "spl", []byte{0x40, 0x88, 0x64, 0x24, 0x01}},
		{"r8", 1, 8, "r8", []byte{0x4d, 0x89, 0x40, 0x01}},
		{"r8", 1, 4, "r8d", []byte{0x45, 0x89, 0x40, 0x01}},
		{"r8", 1, 2, "r8w", []byte{0x66, 0x45, 0x89, 0x40, 0x01}},
		{"r8", 1, 1, "r8b", []byte{0x45, 0x88, 0x40, 0x01}},
		{"r9", 1, 8, "r9", []byte{0x4d, 0x89, 0x49, 0x01}},
		{"r9", 1, 4, "r9d", []byte{0x45, 0x89, 0x49, 0x01}},
		{"r9", 1, 2, "r9w", []byte{0x66, 0x45, 0x89, 0x49, 0x01}},
		{"r9", 1, 1, "r9b", []byte{0x45, 0x88, 0x49, 0x01}},
		{"r10", 1, 8, "r10", []byte{0x4d, 0x89, 0x52, 0x01}},
		{"r10", 1, 4, "r10d", []byte{0x45, 0x89, 0x52, 0x01}},
		{"r10", 1, 2, "r10w", []byte{0x66, 0x45, 0x89, 0x52, 0x01}},
		{"r10", 1, 1, "r10b", []byte{0x45, 0x88, 0x52, 0x01}},
		{"r11", 1, 8, "r11", []byte{0x4d, 0x89, 0x5b, 0x01}},
		{"r11", 1, 4, "r11d", []byte{0x45, 0x89, 0x5b, 0x01}},
		{"r11", 1, 2, "r11w", []byte{0x66, 0x45, 0x89, 0x5b, 0x01}},
		{"r11", 1, 1, "r11b", []byte{0x45, 0x88, 0x5b, 0x01}},
		{"r12", 1, 8, "r12", []byte{0x4d, 0x89, 0x64, 0x24, 0x01}},
		{"r12", 1, 4, "r12d", []byte{0x45, 0x89, 0x64, 0x24, 0x01}},
		{"r12", 1, 2, "r12w", []byte{0x66, 0x45, 0x89, 0x64, 0x24, 0x01}},
		{"r12", 1, 1, "r12b", []byte{0x45, 0x88, 0x64, 0x24, 0x01}},
		{"r13", 1, 8, "r13", []byte{0x4d, 0x89, 0x6d, 0x01}},
		{"r13", 1, 4, "r13d", []byte{0x45, 0x89, 0x6d, 0x01}},
		{"r13", 1, 2, "r13w", []byte{0x66, 0x45, 0x89, 0x6d, 0x01}},
		{"r13", 1, 1, "r13b", []byte{0x45, 0x88, 0x6d, 0x01}},
		{"r14", 1, 8, "r14", []byte{0x4d, 0x89, 0x76, 0x01}},
		{"r14", 1, 4, "r14d", []byte{0x45, 0x89, 0x76, 0x01}},
		{"r14", 1, 2, "r14w", []byte{0x66, 0x45, 0x89, 0x76, 0x01}},
		{"r14", 1, 1, "r14b", []byte{0x45, 0x88, 0x76, 0x01}},
		{"r15", 1, 8, "r15", []byte{0x4d, 0x89, 0x7f, 0x01}},
		{"r15", 1, 4, "r15d", []byte{0x45, 0x89, 0x7f, 0x01}},
		{"r15", 1, 2, "r15w", []byte{0x66, 0x45, 0x89, 0x7f, 0x01}},
		{"r15", 1, 1, "r15b", []byte{0x45, 0x88, 0x7f, 0x01}},
	}

	for _, pattern := range usagePatterns {
		a := asm.New()
		t.Logf("store %dB [%s+%d], %s", pattern.ByteCount, pattern.RegisterTo, pattern.Offset, pattern.RegisterFrom)
		a.StoreRegister(pattern.RegisterTo, pattern.Offset, pattern.ByteCount, pattern.RegisterFrom)
		assert.DeepEqual(t, a.Code(), pattern.Code)
	}
}
