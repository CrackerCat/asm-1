package asm_test

import (
	"testing"

	"github.com/akyoto/asm"
	"github.com/akyoto/assert"
)

func TestCompareRegisterNumber(t *testing.T) {
	usagePatterns := []struct {
		Register string
		Number   int64
		Code     []byte
	}{
		{"rax", 1, []byte{0x48, 0x83, 0xf8, 0x01}},
		{"eax", 1, []byte{0x83, 0xf8, 0x01}},
		{"ax", 1, []byte{0x66, 0x83, 0xf8, 0x01}},
		{"rcx", 1, []byte{0x48, 0x83, 0xf9, 0x01}},
		{"ecx", 1, []byte{0x83, 0xf9, 0x01}},
		{"cx", 1, []byte{0x66, 0x83, 0xf9, 0x01}},
		{"rdx", 1, []byte{0x48, 0x83, 0xfa, 0x01}},
		{"edx", 1, []byte{0x83, 0xfa, 0x01}},
		{"dx", 1, []byte{0x66, 0x83, 0xfa, 0x01}},
		{"rbx", 1, []byte{0x48, 0x83, 0xfb, 0x01}},
		{"ebx", 1, []byte{0x83, 0xfb, 0x01}},
		{"bx", 1, []byte{0x66, 0x83, 0xfb, 0x01}},
		{"rsi", 1, []byte{0x48, 0x83, 0xfe, 0x01}},
		{"esi", 1, []byte{0x83, 0xfe, 0x01}},
		{"si", 1, []byte{0x66, 0x83, 0xfe, 0x01}},
		{"rdi", 1, []byte{0x48, 0x83, 0xff, 0x01}},
		{"edi", 1, []byte{0x83, 0xff, 0x01}},
		{"di", 1, []byte{0x66, 0x83, 0xff, 0x01}},
		{"rsp", 1, []byte{0x48, 0x83, 0xfc, 0x01}},
		{"esp", 1, []byte{0x83, 0xfc, 0x01}},
		{"sp", 1, []byte{0x66, 0x83, 0xfc, 0x01}},
		{"rbp", 1, []byte{0x48, 0x83, 0xfd, 0x01}},
		{"ebp", 1, []byte{0x83, 0xfd, 0x01}},
		{"bp", 1, []byte{0x66, 0x83, 0xfd, 0x01}},
		{"r8", 1, []byte{0x49, 0x83, 0xf8, 0x01}},
		{"r8d", 1, []byte{0x41, 0x83, 0xf8, 0x01}},
		{"r8w", 1, []byte{0x66, 0x41, 0x83, 0xf8, 0x01}},
		{"r9", 1, []byte{0x49, 0x83, 0xf9, 0x01}},
		{"r9d", 1, []byte{0x41, 0x83, 0xf9, 0x01}},
		{"r9w", 1, []byte{0x66, 0x41, 0x83, 0xf9, 0x01}},
		{"r10", 1, []byte{0x49, 0x83, 0xfa, 0x01}},
		{"r10d", 1, []byte{0x41, 0x83, 0xfa, 0x01}},
		{"r10w", 1, []byte{0x66, 0x41, 0x83, 0xfa, 0x01}},
		{"r11", 1, []byte{0x49, 0x83, 0xfb, 0x01}},
		{"r11d", 1, []byte{0x41, 0x83, 0xfb, 0x01}},
		{"r11w", 1, []byte{0x66, 0x41, 0x83, 0xfb, 0x01}},
		{"r12", 1, []byte{0x49, 0x83, 0xfc, 0x01}},
		{"r12d", 1, []byte{0x41, 0x83, 0xfc, 0x01}},
		{"r12w", 1, []byte{0x66, 0x41, 0x83, 0xfc, 0x01}},
		{"r13", 1, []byte{0x49, 0x83, 0xfd, 0x01}},
		{"r13d", 1, []byte{0x41, 0x83, 0xfd, 0x01}},
		{"r13w", 1, []byte{0x66, 0x41, 0x83, 0xfd, 0x01}},
		{"r14", 1, []byte{0x49, 0x83, 0xfe, 0x01}},
		{"r14d", 1, []byte{0x41, 0x83, 0xfe, 0x01}},
		{"r14w", 1, []byte{0x66, 0x41, 0x83, 0xfe, 0x01}},
		{"r15", 1, []byte{0x49, 0x83, 0xff, 0x01}},
		{"r15d", 1, []byte{0x41, 0x83, 0xff, 0x01}},
		{"r15w", 1, []byte{0x66, 0x41, 0x83, 0xff, 0x01}},

		// 1-byte registers
		{"al", 1, []byte{0x3c, 0x01}},
		{"cl", 1, []byte{0x80, 0xf9, 0x01}},
		{"dl", 1, []byte{0x80, 0xfa, 0x01}},
		{"bl", 1, []byte{0x80, 0xfb, 0x01}},
		{"r8b", 1, []byte{0x41, 0x80, 0xf8, 0x01}},
		{"r9b", 1, []byte{0x41, 0x80, 0xf9, 0x01}},
		{"r10b", 1, []byte{0x41, 0x80, 0xfa, 0x01}},
		{"r11b", 1, []byte{0x41, 0x80, 0xfb, 0x01}},
	}

	for _, pattern := range usagePatterns {
		a := asm.New()
		t.Logf("cmp %s, %d", pattern.Register, pattern.Number)
		a.CompareRegisterNumber(pattern.Register, uint64(pattern.Number))
		assert.DeepEqual(t, a.Bytes(), pattern.Code)
	}
}
